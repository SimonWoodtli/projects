#!/home/sero/.node/bin/node

/*Student results
Hereâ€™s a program that shows female students results (name and average grade).*/
const students = [
{
name: "Anna",
sex: "f",
grades: [4.5, 3.5, 4]
},
{
name: "Dennis",
sex: "m",
country: "Germany",
grades: [5, 1.5, 4]
},
{
name: "Martha",
sex: "f",
grades: [5, 4, 2.5, 3]
},
{
name: "Brock",
sex: "m",
grades: [4, 3, 2]
}
];
// Compute female student results
const femaleStudentsResults = [];
for (const student of students) {
if (student.sex === "f") {
let gradesSum = 0;
for (const grade of student.grades) {
gradesSum += grade;
}
const averageGrade = gradesSum / student.grades.length;
femaleStudentsResults.push({
name: student.name,
avgGrade: averageGrade
});
}
}
console.log(femaleStudentsResults);

// welcome to functional programming :o
const femaleStudents = student => student.sex === "f"
const femaleStudentsArray = student => student.filter(femaleStudents)

const reduce = array => array.reduce((sum, value) => sum + value, 0) / array.length;

const x = [1,2,3,4,5]
// Why does forEach not work? Why do I need map?
const name = femaleStudentsArray(students).map(student => student.name)
const grades = femaleStudentsArray(students).map(student => student.grades)
const gradeAverage = grades => grades.reduce((sum, value) => sum + value)
//const grades = femaleStudentsArray(students).forEach(student => console.log(student.name))
//console.log(grades)

console.log(femaleStudentsArray(students))
console.log(grades)
console.log(name)
console.log(gradeAverage(grades))
console.log(gradeAverage(x))

